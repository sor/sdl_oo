#pragma once
#ifndef _SDL_PIXELS_HPP
#define _SDL_PIXELS_HPP

#include "SDL_stdinc.hpp"

#include <memory>

namespace SDL
{
	namespace C
	{
		#include <SDL_pixels.h>
	}

	struct Color
		: public C::SDL_Color
	{
		__alwaysinline
		constexpr
		Color() noexcept
			: SDL_Color()
		{}

		__alwaysinline
		constexpr explicit
		Color( Uint8 grey ) noexcept
			: SDL_Color{ r = grey, g = grey, b = grey, a = 255 }
		{}

		__alwaysinline
		constexpr
		Color( Uint8 red, Uint8 green, Uint8 blue ) noexcept
			: SDL_Color{ r = red, g = green, b = blue, a = 255 }
		{}

		__alwaysinline
		constexpr
		Color(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha ) noexcept
			: SDL_Color{ r = red, g = green, b = blue, a = alpha }
		{}
	};
	using Colour = Color;
	
	// Warning! Most instances are generated by SDL and shall not be freed by the user/shared_ptr
	class Palette
	{
		typedef C::SDL_Palette		ptr_type;
		std::shared_ptr<ptr_type>	ptr;

		PTR_DELETER( C::SDL_FreePalette )

	public:
		PTR_AUTOCAST
		//PTR_STRUCT_DEREF

		__alwaysinline
		Palette() noexcept
		:	ptr()
		{}

		// non Self deleting
		__alwaysinline
		Palette( C::SDL_Palette * pal  ) noexcept
		:	ptr( pal, not_deleter )
		{}

		// Self deleting
		__alwaysinline
		Palette( int ncolors ) noexcept
		{
			ptr = std::shared_ptr<ptr_type>(
				C::SDL_AllocPalette( ncolors ),
				deleter );
		}

		__alwaysinline
		~Palette() noexcept
		{}

		__alwaysinline
		int SetColors( const Color colors[], int firstcolor, int ncolors = 1 )
		{
			return C::SDL_SetPaletteColors( *this, colors, firstcolor, ncolors );
		}
	};

	// Warning! Most instances are generated by SDL and shall not be freed by the user/shared_ptr
	class PixelFormat
	{
	public:
		enum class Type : Uint32 // TODO: Original enum is unnamed
		{
			UNKNOWN		= C::SDL_PIXELFORMAT_UNKNOWN,
			INDEX1LSB	= C::SDL_PIXELFORMAT_INDEX1LSB,
			INDEX1MSB	= C::SDL_PIXELFORMAT_INDEX1MSB,
			INDEX4LSB	= C::SDL_PIXELFORMAT_INDEX4LSB,
			INDEX4MSB	= C::SDL_PIXELFORMAT_INDEX4MSB,
			INDEX8		= C::SDL_PIXELFORMAT_INDEX8,
			RGB332		= C::SDL_PIXELFORMAT_RGB332,
			RGB444		= C::SDL_PIXELFORMAT_RGB444,
			RGB555		= C::SDL_PIXELFORMAT_RGB555,
			BGR555		= C::SDL_PIXELFORMAT_BGR555,
			ARGB4444	= C::SDL_PIXELFORMAT_ARGB4444,
			RGBA4444	= C::SDL_PIXELFORMAT_RGBA4444,
			ABGR4444	= C::SDL_PIXELFORMAT_ABGR4444,
			BGRA4444	= C::SDL_PIXELFORMAT_BGRA4444,
			ARGB1555	= C::SDL_PIXELFORMAT_ARGB1555,
			RGBA5551	= C::SDL_PIXELFORMAT_RGBA5551,
			ABGR1555	= C::SDL_PIXELFORMAT_ABGR1555,
			BGRA5551	= C::SDL_PIXELFORMAT_BGRA5551,
			RGB565		= C::SDL_PIXELFORMAT_RGB565,
			BGR565		= C::SDL_PIXELFORMAT_BGR565,
			RGB24		= C::SDL_PIXELFORMAT_RGB24,
			BGR24		= C::SDL_PIXELFORMAT_BGR24,
			RGB888		= C::SDL_PIXELFORMAT_RGB888,
			RGBX8888	= C::SDL_PIXELFORMAT_RGBX8888,
			BGR888		= C::SDL_PIXELFORMAT_BGR888,
			BGRX8888	= C::SDL_PIXELFORMAT_BGRX8888,
			ARGB8888	= C::SDL_PIXELFORMAT_ARGB8888,
			RGBA8888	= C::SDL_PIXELFORMAT_RGBA8888,
			ABGR8888	= C::SDL_PIXELFORMAT_ABGR8888,
			BGRA8888	= C::SDL_PIXELFORMAT_BGRA8888,
			ARGB2101010	= C::SDL_PIXELFORMAT_ARGB2101010,

			YV12		= C::SDL_PIXELFORMAT_YV12,
			IYUV		= C::SDL_PIXELFORMAT_IYUV,
			YUY2		= C::SDL_PIXELFORMAT_YUY2,
			UYVY		= C::SDL_PIXELFORMAT_UYVY,
			YVYU		= C::SDL_PIXELFORMAT_YVYU
		};

	private:
		typedef C::SDL_PixelFormat	ptr_type;
		std::shared_ptr<ptr_type>	ptr;

		PTR_DELETER( C::SDL_FreeFormat )

	public:
		PTR_AUTOCAST
		PTR_STRUCT_DEREF

		__alwaysinline
		PixelFormat() noexcept
		{}

		// non Self deleting
		__alwaysinline
		PixelFormat( C::SDL_PixelFormat * pfmt ) noexcept
		:	ptr( pfmt, not_deleter )
		{}

		// Self deleting
		__alwaysinline
		PixelFormat( Type type ) noexcept
		{
			ptr = std::shared_ptr<ptr_type>(
				C::SDL_AllocFormat( base_cast( type ) ),
				deleter );
		}

		__alwaysinline
		~PixelFormat() noexcept
		{}

		__alwaysinline
		Palette
		palette() const noexcept
		{
			return Palette( ptr->palette );
		}
	};
}

#endif
