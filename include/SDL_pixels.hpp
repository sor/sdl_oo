#pragma once
#ifndef _SDL_PIXELS_HPP
#define _SDL_PIXELS_HPP

#include "SDL_stdinc.hpp"

SDL_NAMESPACE_BEGIN
#include <SDL_pixels.h>
SDL_NAMESPACE_END

namespace SDL
{
	struct Color
		: public SDL_NAMESPACE::SDL_Color
	{
		constexpr inline
		Color() noexcept
			: SDL_NAMESPACE::SDL_Color()
		{}

		explicit constexpr inline
		Color( Uint8 grey ) noexcept
			: SDL_NAMESPACE::SDL_Color{ r = grey, g = grey, b = grey, a = 255 }
		{}

		constexpr inline
		Color( Uint8 red, Uint8 green, Uint8 blue ) noexcept
			: SDL_NAMESPACE::SDL_Color{ r = red, g = green, b = blue, a = 255 }
		{}

		constexpr inline
		Color( Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha ) noexcept
			: SDL_NAMESPACE::SDL_Color{ r = red, g = green, b = blue, a = alpha }
		{}
	};
	using Colour = Color;
	
	// Warning! Most instances are generated by SDL and shall not be freed by the user/shared_ptr
	class Palette
	{
		using ptr_type = SDL_NAMESPACE::SDL_Palette;
		std::shared_ptr<ptr_type>	ptr;

		PTR_DELETER( SDL_NAMESPACE::SDL_FreePalette )

	public:
		PTR_AUTOCAST
		//PTR_STRUCT_DEREF

		inline
		Palette() noexcept
			: ptr()
		{}

		// non Self deleting
		/* implicit */ inline
		Palette( SDL_NAMESPACE::SDL_Palette * pal  ) noexcept
			: ptr( pal, not_deleter )
		{}

		// Self deleting
		explicit inline
		Palette( int ncolors ) noexcept
		{
			ptr = std::shared_ptr<ptr_type>(
				SDL_NAMESPACE::SDL_AllocPalette( ncolors ),
				deleter );
		}

		/*
		inline
		~Palette() noexcept
		{}
		*/

		inline
		int
		SetColors( const Color colors[], int firstcolor, int ncolors = 1 ) noexcept
		{
			return SDL_NAMESPACE::SDL_SetPaletteColors( *this, colors, firstcolor, ncolors );
		}
	};

	// Warning! Most instances are generated by SDL and shall not be freed by the user/shared_ptr
	class PixelFormat
	{
	public:
		ENUM_CLASS_TYPE( Type, SDL_NAMESPACE::Uint32 )
		{
			Unknown     = SDL_NAMESPACE::SDL_PIXELFORMAT_UNKNOWN,
			Index1LSB   = SDL_NAMESPACE::SDL_PIXELFORMAT_INDEX1LSB,
			Index1MSB   = SDL_NAMESPACE::SDL_PIXELFORMAT_INDEX1MSB,
			Index4LSB   = SDL_NAMESPACE::SDL_PIXELFORMAT_INDEX4LSB,
			Index4MSB   = SDL_NAMESPACE::SDL_PIXELFORMAT_INDEX4MSB,
			Index8      = SDL_NAMESPACE::SDL_PIXELFORMAT_INDEX8,
			RGB332      = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB332,
			RGB444      = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB444,
			RGB555      = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB555,
			BGR555      = SDL_NAMESPACE::SDL_PIXELFORMAT_BGR555,
			ARGB4444    = SDL_NAMESPACE::SDL_PIXELFORMAT_ARGB4444,
			RGBA4444    = SDL_NAMESPACE::SDL_PIXELFORMAT_RGBA4444,
			ABGR4444    = SDL_NAMESPACE::SDL_PIXELFORMAT_ABGR4444,
			BGRA4444    = SDL_NAMESPACE::SDL_PIXELFORMAT_BGRA4444,
			ARGB1555    = SDL_NAMESPACE::SDL_PIXELFORMAT_ARGB1555,
			RGBA5551    = SDL_NAMESPACE::SDL_PIXELFORMAT_RGBA5551,
			ABGR1555    = SDL_NAMESPACE::SDL_PIXELFORMAT_ABGR1555,
			BGRA5551    = SDL_NAMESPACE::SDL_PIXELFORMAT_BGRA5551,
			RGB565      = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB565,
			BGR565      = SDL_NAMESPACE::SDL_PIXELFORMAT_BGR565,
			RGB24       = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB24,
			BGR24       = SDL_NAMESPACE::SDL_PIXELFORMAT_BGR24,
			RGB888      = SDL_NAMESPACE::SDL_PIXELFORMAT_RGB888,
			RGBX8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_RGBX8888,
			BGR888      = SDL_NAMESPACE::SDL_PIXELFORMAT_BGR888,
			BGRX8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_BGRX8888,
			ARGB8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_ARGB8888,
			RGBA8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_RGBA8888,
			ABGR8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_ABGR8888,
			BGRA8888    = SDL_NAMESPACE::SDL_PIXELFORMAT_BGRA8888,
			ARGB2101010 = SDL_NAMESPACE::SDL_PIXELFORMAT_ARGB2101010,

			YV12        = SDL_NAMESPACE::SDL_PIXELFORMAT_YV12,
			IYUV        = SDL_NAMESPACE::SDL_PIXELFORMAT_IYUV,
			YUY2        = SDL_NAMESPACE::SDL_PIXELFORMAT_YUY2,
			UYVY        = SDL_NAMESPACE::SDL_PIXELFORMAT_UYVY,
			YVYU        = SDL_NAMESPACE::SDL_PIXELFORMAT_YVYU
		};

	private:
		using ptr_type = SDL_NAMESPACE::SDL_PixelFormat;
		std::shared_ptr<ptr_type>	ptr;

		PTR_DELETER( SDL_NAMESPACE::SDL_FreeFormat );

	public:
		PTR_AUTOCAST;
		PTR_STRUCT_DEREF;

		inline
		PixelFormat() noexcept = default;

		// non Self deleting
		/* implicit */ inline
		PixelFormat( ptr_type * pfmt ) noexcept
			: ptr( pfmt, not_deleter )
		{}

		// Self deleting
		explicit inline
		PixelFormat( Type type ) noexcept
		{
			ptr = std::shared_ptr<ptr_type>(
				SDL_NAMESPACE::SDL_AllocFormat( to_underlying( type ) ),
				deleter );
		}

		/*
		inline
		~PixelFormat() noexcept
		{}
		*/

		inline
		Palette
		palette() const noexcept
		{
			return Palette( ptr->palette );
		}
	};

	ENUM_INFO_TYPE( PixelFormat::Type, SDL_NAMESPACE::Uint32 );
}

#endif
